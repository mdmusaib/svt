{"version":3,"sources":["components/CustomerDetails.js","components/EditingTableInBooking.js","components/EditingTableForVechicle.js"],"names":["Select","Option","BookingPage","props","Form","useForm","form","containerRef","useRef","api","useApi","useState","setTableData","setVehicleTableData","useEffect","window","matchMedia","matches","current","style","padding","location","type","setFieldsValue","record","JSON","parse","items","vehicle_details","handleSubmit","value","a","invoke","endPoint","method","data","response","resetFields","console","log","ref","onClick","history","goBack","marginBottom","fontSize","paddingTop","paddingLeft","onFinish","xl","md","span","Item","name","rules","required","message","placeholder","prefix","maxLength","gutter","danger","htmlType","EditableContext","React","createContext","EditableRow","index","component","Provider","EditableCell","title","editable","children","dataIndex","handleSave","restProps","editing","setEditing","inputRef","useContext","focus","toggleEdit","save","validateFields","values","childNode","margin","onPressEnter","onBlur","className","paddingRight","Component","customerData","setCustomerData","getAllCustomer","onChange","map","EditingTableForVechicle","handleDelete","key","dataSource","state","setState","filter","item","handleAdd","count","newData","vehicle_no","dc_no","from_loc","to_loc","material","party_name","rate","scale","weight","gst","payment_type","diesel_rt","diesel_qty","loading_quantity","accepted_quantity","logistic_rent","lead","date","puc","total_amount","expences","driver_name","profit","row","findIndex","splice","getTableData","columns","width","render","_","length","onConfirm","color","prevProps","prevState","stringify","rowData","this","components","body","cell","col","onCell","view","rowClassName","bordered","pagination","scroll","x"],"mappings":"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AQyB,WAAU,SAAC5B,GAAD,OAAU2B,EAAIhC,MAAQK,EAAKL,OACrDK,EAAOG,EAAQzC,GACrByC,EAAQ0B,OAAOnE,EAAO,EAAtB,2BAA8BsC,GAAS2B,IACvC,EAAK7B,SACH,CACEF,WAAYO,IAEd,kBAAM,EAAKzG,MAAMoI,aAAa,EAAKjC,MAAMD,gBAxN3C,EAAKmC,QAAU,CACb,CACEjE,MAAO,eACPG,UAAW,aACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,UACPG,UAAW,QACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,SACPG,UAAW,WACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,OACPG,UAAW,SACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,aACPG,UAAW,WACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,eACPG,UAAW,aACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,SACPG,UAAW,OACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,WACPG,UAAW,SACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,QACPG,UAAW,MACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,iBACPG,UAAW,eACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,gBACPG,UAAW,YACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,eACPG,UAAW,aACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,qBACPG,UAAW,mBACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,sBACPG,UAAW,oBACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,kBACPG,UAAW,gBACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,SACPG,UAAW,OACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,SACPG,UAAW,OACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,QACPG,UAAW,MACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,aACPG,UAAW,WACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,gBACPG,UAAW,cACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,WACPG,UAAW,SACXF,UAAU,EACViE,MAAO,OAET,CACElE,MAAO,YACPG,UAAW,eACXF,UAAU,EACViE,MAAO,OAIT,CACElE,MAAO,GACPG,UAAW,YACXgE,OAAQ,SAACC,EAAGnH,GAAJ,OACN,EAAK8E,MAAMD,WAAWuC,QAAU,EAC9B,cAAC,IAAD,CACErE,MAAM,kBACNsE,UAAW,kBAAM,EAAK1C,aAAa3E,EAAO4E,MAF5C,SAIE,cAAC,IAAD,CAAgBjF,MAAO,CAAC2H,MAAM,aAE9B,QAGV,EAAKxC,MAAQ,CACXD,WAAY,GACZM,MAAO,GA1JQ,E,sDA8JnB,SAAmBoC,EAAWC,GAE1BvH,KAAKwH,UAAUF,EAAUG,WAAazH,KAAKwH,UAAUE,KAAKhJ,MAAM+I,UAEhEC,KAAK5C,SAAS,CACZF,WAAY8C,KAAKhJ,MAAM+I,Y,oBA4D7B,WAAU,IAAD,OACC7C,EAAe8C,KAAK7C,MAApBD,WACF+C,EAAa,CACjBC,KAAM,CACJjB,IAAKlE,EACLoF,KAAMhF,IAGJkE,EAAUW,KAAKX,QAAQvC,KAAI,SAACsD,GAChC,OAAKA,EAAI/E,SAIF,2BACF+E,GADL,IAEEC,OAAQ,SAAChI,GAAD,MAAa,CACnBA,SACAgD,SAAU+E,EAAI/E,SACdE,UAAW6E,EAAI7E,UACfH,MAAOgF,EAAIhF,MACXI,WAAY,EAAKA,WACjB8D,MAAMc,EAAId,UAXLc,KAgBX,OACE,sBAAKpI,MAAO,CAAEsH,MAAO,QAArB,UACIU,KAAKhJ,MAAMsJ,KAAK,GAAG,cAAC,IAAD,CACnBhH,QAAS0G,KAAKzC,UACdpF,KAAK,UACLH,MAAO,CACLyB,aAAc,IAJG,uBASrB,cAAC,IAAD,CACEwG,WAAYA,EAEZ1D,UAAU,eACVgE,aAAc,iBAAM,gBACpBC,UAAQ,EACRtD,WAAYA,EACZmC,QAASA,EACToB,YAAY,EACZC,OAAQ,CAAEC,EAAG,e,GA9Qe9F,IAAM4B,WAqR7BM,O","file":"static/js/10.7e79b102.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Col, DatePicker, Form, Input, Row, Select } from \"antd\";\r\nimport {\r\n  MailOutlined,\r\n  MobileOutlined,\r\n  UserOutlined,\r\n  PercentageOutlined,\r\n} from \"@ant-design/icons\";\r\nimport moment from \"moment\";\r\nimport EditingTableInBooking from \"./EditingTableInBooking\";\r\nimport EditingTableForVechicle from \"./EditingTableForVechicle\";\r\nimport useApi from \"src/core/useApi\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst BookingPage = (props) => {\r\n  const [form] = Form.useForm();\r\n  let containerRef = useRef();\r\n  let api=useApi();\r\n  const [tableData, setTableData] = useState([]);\r\n  const [vehicleTableData, setVehicleTableData] = useState([]);\r\n  useEffect(() => {\r\n    \r\n    let lgScreen = window.matchMedia(\"(min-width: 768px)\").matches;\r\n    if (lgScreen) {\r\n      containerRef.current.style.padding = \"20px 60px\";\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if(props?.location?.type === \"view\"){\r\n      form.setFieldsValue(props.location.record);\r\n      setTableData(JSON.parse(props.location.record.items));\r\n      setVehicleTableData(props.location.record.vehicle_details);\r\n      // console.log(JSON.parse(props.location.record.vehicle_details))\r\n    }\r\n  }, [props?.location?.type]);\r\n\r\n  const handleSubmit =async (value) => {\r\n    \r\n    let response=await api.invoke({endPoint:\"https://logistic.svtinfra.com/api/customers/create\",method:\"post\",data:value});\r\n      form.resetFields();\r\n    console.log(\"called\", response);\r\n\r\n  };\r\n\r\n  const getTableData = (data) => {\r\n    if (data.length > 0) {\r\n      let calcTotalWeight = 0;\r\n      data.map((list) => {\r\n        calcTotalWeight = calcTotalWeight + parseInt(list.weight);\r\n      });\r\n      setTableData(data);\r\n      form.setFieldsValue({\r\n        total_weight: calcTotalWeight,\r\n      });\r\n      updateFinalRate();\r\n    }\r\n  };\r\n  // useEffect(()=>{\r\n  //   let vehicleData=[...vehicleTableData];\r\n  //   let lastRow=vehicleData.pop();\r\n    \r\n  //   if(lastRow?.gst && lastRow.total_amount){\r\n  //     let updatedRowData={...lastRow,total_amount:5000}\r\n  //     // lastRow.total_amount=43456546;\r\n  //     setVehicleTableData([...vehicleData,updatedRowData])\r\n  //   }\r\n  // },[vehicleTableData])\r\n\r\n  const getTableDataForVehicle = (data) => {\r\n    let vehicle_data=[...data];\r\n    let lastRow=vehicle_data.pop();\r\n    if(parseInt(lastRow.rate) && parseInt(lastRow.weight)){\r\n      \r\n      let total_amt=parseInt(lastRow.rate) * parseInt(lastRow.weight);\r\n      lastRow.total_amount=total_amt;\r\n    }\r\n     if(lastRow.gst===true && lastRow.total_amount){\r\n        let calculatedGST=lastRow.total_amount+(lastRow.total_amount*5/100);\r\n        lastRow.total_amount=calculatedGST.toFixed(2);\r\n     }\r\n    console.log('data',vehicle_data,lastRow)\r\n    setVehicleTableData([...vehicle_data,lastRow]);\r\n  };\r\n\r\n  const updateFinalRate = () => {\r\n    let value = form.getFieldValue();\r\n    let ratePerKg = parseFloat(value.rate);\r\n    let serviceTax = parseFloat(value.tax);\r\n    let totalWeight = parseFloat(value.total_weight);\r\n    let totalPrice = ratePerKg * totalWeight;\r\n    let taxRate = (totalPrice * serviceTax) / 100;\r\n    let finalPrice = totalPrice + taxRate;\r\n    if (ratePerKg && totalWeight)\r\n      form.setFieldsValue({\r\n        total_amount: parseFloat(finalPrice) ? finalPrice : 0,\r\n      });\r\n  };\r\n\r\n const handleTaxChange=()=>{\r\n  updateFinalRate();\r\n }\r\n  const handleReset = () => {\r\n    form.resetFields();\r\n    setTableData([]);\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} style={{ padding: \"20px 10px\" }}>\r\n      <Row>\r\n        \r\n        {props.location.type===\"view\"?<Button\r\n          onClick={()=>props.history.goBack()}\r\n          type=\"primary\"\r\n          style={{\r\n            marginBottom: 16,\r\n          }}\r\n        >\r\n          Back\r\n        </Button>:\r\n        <p style={{ fontSize: \"calc(10px + 1vmin)\", }}>Customer Details</p>}\r\n      </Row>\r\n      <hr />\r\n      <Form style={{ paddingTop: 20,paddingLeft:180 }} form={form} onFinish={handleSubmit}>\r\n        <Row>\r\n          <Col xl={12} md={6}>\r\n            <Row>\r\n              <Col span={11}>\r\n                <label>Name *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Form.Item\r\n                  name=\"name\"\r\n                  rules={[\r\n                    { required: true, message: \"Please enter your name!\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder=\"Name\" prefix={<UserOutlined />} />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            \r\n            <Row>\r\n              <Col span={11}>\r\n                <label>Email *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Form.Item\r\n                  name=\"email\"\r\n                  rules={[\r\n                    { type: \"email\", message: \"Please Enter Valid Mail\" },\r\n                    { required: true, message: \"Please enter your mail!\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder=\"Email\" prefix={<MailOutlined />} />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <label>Mobile Number *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Form.Item\r\n                  name=\"mobile\"\r\n                  rules={[\r\n                    { required: true, message: \"Please enter your number!\" },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    placeholder=\"Mobile Number\"\r\n                    maxLength={10}\r\n                    prefix={<MobileOutlined />}\r\n                  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <label>PAN *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Form.Item\r\n                  name=\"pan_no\"\r\n                  rules={[\r\n                    { required: true, message: \"Please enter your name!\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder=\"PAN\"  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <label>Aadhaar *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Form.Item\r\n                  name=\"aadhaar_no\"\r\n                  rules={[\r\n                    { required: true, message: \"Please enter your name!\" },\r\n                  ]}\r\n                >\r\n                  <Input placeholder=\"Aadhaar\"  />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <label>Address *</label>\r\n              </Col>\r\n              <Col span={11}>\r\n               \r\n                <Form.Item\r\n                  name=\"address\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"Please enter receiver address\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <TextArea placeholder=\"Receiver Address\" />\r\n                </Form.Item>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          </Row>\r\n        {props.location.type===\"view\"?\"\":<Row gutter={16}>\r\n          <Col>\r\n            <Form.Item>\r\n              <Button type={\"primary\"} danger htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Col>\r\n          <Col>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </Col>\r\n        </Row>}\r\n        \r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookingPage;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { Table, Input, Button, Popconfirm, Form } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log(\"Save failed:\", errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditingTableInBooking extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: \"* Commodity\",\r\n        dataIndex: \"commodity\",\r\n        width: 200,\r\n        editable: true,\r\n      },\r\n      {\r\n        title: \"* Weight in KGs\",\r\n        width: 200,\r\n        dataIndex: \"weight\",\r\n        editable: true,\r\n      },\r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        render: (_, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <Popconfirm\r\n              title=\"Sure to delete?\"\r\n              onConfirm={() => this.handleDelete(record.key)}\r\n            >\r\n              <DeleteOutlined />\r\n            </Popconfirm>\r\n          ) : null,\r\n      },\r\n    ];\r\n    this.state = {\r\n      dataSource: [],\r\n      count: 2,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      JSON.stringify(prevProps.rowData) !== JSON.stringify(this.props.rowData)\r\n    ) {\r\n      this.setState({\r\n        dataSource: this.props.rowData,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({\r\n      dataSource: dataSource.filter((item) => item.key !== key),\r\n    });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      commodity: `0`,\r\n      weight: \"0\",\r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1,\r\n    });\r\n  };\r\n\r\n   \r\n\r\n  handleSave = (row) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    this.setState(\r\n      {\r\n        dataSource: newData,\r\n      },\r\n      () => this.props.getTableData(this.state.dataSource)\r\n    );\r\n  };\r\n  \r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n  \r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onHeaderCell: (column) => ({\r\n          width: column.width,\r\n        }),\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n\r\n          handleSave: this.handleSave,\r\n        }),\r\n      };\r\n    });\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        {this.props.view ? (\r\n          \"\"\r\n        ) : (\r\n          <Button\r\n            onClick={this.handleAdd}\r\n            type=\"primary\"\r\n            style={{\r\n              marginBottom: 16,\r\n            }}\r\n          >\r\n            Add a row\r\n          </Button>\r\n        )}\r\n\r\n        <Table\r\n          components={components}\r\n         \r\n          rowClassName={() => \"editable-row\"}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n          scroll={{ x: 2400 }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditingTableInBooking;\r\n","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport { Table, Input, Button, Popconfirm, Form, Select } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport \"./styles.css\";\r\nimport Checkbox from \"antd/lib/checkbox/Checkbox\";\r\nimport useApi from \"src/core/useApi\";\r\nconst EditableContext = React.createContext(null);\r\nconst { Option } = Select;\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  let api=useApi();\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n  const [customerData, setCustomerData] = useState([]);\r\n  useEffect(() => {\r\n    getAllCustomer();\r\n  }, []);\r\n  const getAllCustomer=async ()=>{\r\n    let response=await api.invoke({endPoint:\"http://localhost:8000/api/customers\",method:\"get\"}); \r\n    setCustomerData(response);\r\n    console.log('response',response);\r\n  }\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log(\"Save failed:\", errInfo);\r\n    }\r\n  };\r\n\r\n  const handleUpload=async (event)=>{\r\n\r\n// console.log(\"attachments\",event.target.files)\r\n    // handleSave({...record,images:formData});\r\n  }\r\n  let childNode = children;\r\n\r\n\r\n  if (editable) {\r\n  if(editing){\r\n\r\n    switch (dataIndex) {\r\n      // case \"images\":\r\n      //   childNode=\r\n      //   <Form.Item\r\n      //   style={{\r\n      //     margin: 0,\r\n      //   }}\r\n      //   name={dataIndex}\r\n      //   rules={[\r\n      //     {\r\n      //       required: false,\r\n      //       message: `${title} is required.`,\r\n      //     },\r\n      //   ]}\r\n      // ><div className=\"mb-3\">\r\n      // <input ref={inputRef} type=\"file\" class=\"form-control-file border\"  name=\"fileInput\" onChange={(event)=>handleUpload(event)} multiple=\"true\" />\r\n      // </div>\r\n      // </Form.Item>\r\n      //   break;\r\n      case \"party_name\":\r\n        childNode=  <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n      <Select ref={inputRef}  onChange={save}>\r\n      {customerData.map(data=>\r\n        <option value={`${data.name}`}>{data.name}</option>\r\n        )} \r\n      </Select>\r\n      </Form.Item>;\r\n        break;\r\n      case \"gst\":\r\n      childNode=  <Form.Item\r\n      style={{\r\n        margin: 0,\r\n      }}\r\n      name={dataIndex}\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: `${title} is required.`,\r\n        },\r\n      ]}\r\n    >\r\n    <Select ref={inputRef}  onChange={save}> \r\n    <Option value=\"yes\">YES</Option>\r\n    <Option value=\"no\">NO</Option>\r\n    </Select>\r\n    </Form.Item>;\r\n      break;\r\n      default:\r\n        childNode=\r\n        <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n        break;\r\n    }\r\n  }else{\r\n    childNode=(<div\r\n    className={\"editable-cell-value-wrap\"}\r\n    style={{\r\n      paddingRight: 24,\r\n    }}\r\n    onClick={toggleEdit}\r\n  >\r\n    {children}\r\n  </div>)\r\n  }\r\n\r\n\r\n    // childNode = editing ? (\r\n    \r\n      // <Form.Item\r\n      //   style={{\r\n      //     margin: 0,\r\n      //   }}\r\n      //   name={dataIndex}\r\n      //   rules={[\r\n      //     {\r\n      //       required: true,\r\n      //       message: `${title} is required.`,\r\n      //     },\r\n      //   ]}\r\n      // >\r\n        \r\n      \r\n      //   {dataIndex===\"party_name\"?<Select ref={inputRef} onPressEnter={save} onBlur={save}> <Option value=\"jack\">Jack</Option>\r\n      // <Option value=\"lucy\">Lucy</Option>\r\n      // <Option value=\"disabled\" disabled>\r\n      //   Disabled\r\n      // </Option>\r\n      // <Option value=\"Yiminghe\">yiminghe</Option></Select> :<Input ref={inputRef} onPressEnter={save} onBlur={save} />}\r\n        \r\n      // </Form.Item>\r\n    // ) : (\r\n      // <div\r\n      //   className=\"editable-cell-value-wrap\"\r\n      //   style={{\r\n      //     paddingRight: 24,\r\n      //   }}\r\n      //   onClick={toggleEdit}\r\n      // >\r\n      //   {children}\r\n      // </div>\r\n      \r\n    // );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditingTableForVechicle extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.columns = [\r\n      {\r\n        title: \"* Vehicle No\",\r\n        dataIndex: \"vehicle_no\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* DC.NO\",\r\n        dataIndex: \"dc_no\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* From\",\r\n        dataIndex: \"from_loc\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* To\",\r\n        dataIndex: \"to_loc\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Material\",\r\n        dataIndex: \"material\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Party Name\",\r\n        dataIndex: \"party_name\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Rate\",\r\n        dataIndex: \"rate\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Weight\",\r\n        dataIndex: \"weight\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* GST\",\r\n        dataIndex: \"gst\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Payment Type\",\r\n        dataIndex: \"payment_type\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Diseal Rate\",\r\n        dataIndex: \"diesel_rt\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Diseal Qty\",\r\n        dataIndex: \"diesel_qty\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Loading Quantity\",\r\n        dataIndex: \"loading_quantity\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Accepted Quantity\",\r\n        dataIndex: \"accepted_quantity\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Logistic Rent\",\r\n        dataIndex: \"logistic_rent\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Lead\",\r\n        dataIndex: \"lead\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Date\",\r\n        dataIndex: \"date\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* PUC\",\r\n        dataIndex: \"puc\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Expences\",\r\n        dataIndex: \"expences\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Driver Name\",\r\n        dataIndex: \"driver_name\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Profit\",\r\n        dataIndex: \"profit\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      {\r\n        title: \"* Tot Amt\",\r\n        dataIndex: \"total_amount\",\r\n        editable: true,\r\n        width: \"200\",\r\n      },\r\n      \r\n      \r\n      {\r\n        title: \"\",\r\n        dataIndex: \"operation\",\r\n        render: (_, record) =>\r\n          this.state.dataSource.length >= 1 ? (\r\n            <Popconfirm\r\n              title=\"Sure to delete?\"\r\n              onConfirm={() => this.handleDelete(record.key)}\r\n            >\r\n              <DeleteOutlined style={{color:\"black\"}} />\r\n            </Popconfirm>\r\n          ) : null,\r\n      },\r\n    ];\r\n    this.state = {\r\n      dataSource: [],\r\n      count: 2,\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      JSON.stringify(prevProps.rowData) !== JSON.stringify(this.props.rowData)\r\n    ) {\r\n      this.setState({\r\n        dataSource: this.props.rowData,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    const dataSource = [...this.state.dataSource];\r\n    this.setState({\r\n      dataSource: dataSource.filter((item) => item.key !== key),\r\n    });\r\n  };\r\n\r\n  handleAdd = () => {\r\n    const { count, dataSource } = this.state;\r\n    const newData = {\r\n      key: count,\r\n      vehicle_no: \"\",\r\n      dc_no: \"\",\r\n      from_loc: \"\",\r\n      to_loc: \"\",\r\n      material: \"\",\r\n      party_name: \"\",\r\n      rate: \"\",\r\n      scale: \"\",\r\n      weight:\"\",\r\n      gst:\"\",\r\n      payment_type:\"\",\r\n      diesel_rt:\"\",\r\n      diesel_qty:\"\",\r\n      loading_quantity:\"\",\r\n      accepted_quantity:\"\",\r\n      logistic_rent:\"\",\r\n      lead:\"\",\r\n      date:\"\",\r\n      puc:\"\",\r\n      total_amount: \"\",\r\n      expences: \"\",\r\n      driver_name: \"\",\r\n      profit: \"\",\r\n      \r\n    };\r\n    this.setState({\r\n      dataSource: [...dataSource, newData],\r\n      count: count + 1,\r\n    });\r\n  };\r\n\r\n  handleSave = (row) => {\r\n    const newData = [...this.state.dataSource];\r\n    const index = newData.findIndex((item) => row.key === item.key);\r\n    const item = newData[index];\r\n    newData.splice(index, 1, { ...item, ...row });\r\n    this.setState(\r\n      {\r\n        dataSource: newData,\r\n      },\r\n      () => this.props.getTableData(this.state.dataSource)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { dataSource } = this.state;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave,\r\n          width:col.width\r\n        }),\r\n      };\r\n    });\r\n  \r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n         {this.props.view?\"\":<Button\r\n          onClick={this.handleAdd}\r\n          type=\"primary\"\r\n          style={{\r\n            marginBottom: 16,\r\n          }}\r\n        >\r\n          Add a row\r\n        </Button>}\r\n        <Table\r\n          components={components}\r\n          \r\n          className=\"editingTable\"\r\n          rowClassName={() => \"editable-row\"}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n          scroll={{ x: 4200 }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditingTableForVechicle;\r\n"],"sourceRoot":""}